{
  "name": "shunt",
  "version": "0.1.4",
  "description": "A shit alternative to grunt, hence sh+unt",
  "main": "shunt.js",
  "scripts": {
    "test": "mocha -w test/tests.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com/MrSwitch/node-shunt"
  },
  "keywords": [
    "grunt",
    "build-tool"
  ],
  "author": {
    "name": "Andrew Dodson",
    "email": "andrewjdodson@gmail.com"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/MrSwitch/node-shunt/issues"
  },
  "dependencies": {
    "uglify-js": ">= 0.0.0",
    "clean-css": "1.0.10"
  },
  "engines": {
    "node": "*"
  },
  "devDependencies": {
    "should": ">= 0.0.0"
  },
  "readme": "# Shunt \n*A Shit alternative to Grunt, hence Shunt*\n\nShunt works on files to combine, minify and replace strings etc. What gets spat out is nicely packed for production.\n\n# Install \n\n\tnpm install shunt --save-dev\n\n# Example (Gruntless)\n\nWrite a build.js script, this is where you sort the shit out. Here's an example...\n\n\t// Include the library\n\tvar shunt = require('shunt');\n\n\t// Start Shunting\n\tshunt(\n\t\t// Files to shunt `target:file(s)`\n\t\t{\n\t\t\t// Minify and shunt a single file\n\t\t\t'output.min.js' : 'input.js',\n\n\t\t\t// Create a combined minified file\n\t\t\t'combine.min.js' : ['input1.js', 'input2.js'],\n\n\t\t\t// Create an MarkDown file from an HTML file\n\t\t\t'output.md' : 'input.html',\n\n\t\t\t// Move an HTML file\n\t\t\t'output.html' : 'input.html'\n\t\t},\n\n\t\t// OPTIONS\n\t\t{\n\t\t\treplace : {\n\t\t\t\t// replace all local environment strings with development paths e.g. {find => replace, ... }\n\t\t\t\t'http://localhost/' : 'http://remote.com/'\n\t\t\t}\n\t\t}\n\t);\n\nThen run it `node build.js`, got it? Boom!\n\n# Example (Gruntful)\n\nShunt also doubles as a plugin for Grunt, a la shizame...\n\n\tshunt : {\n\t\t// Slightly different structure\n\n\t\t// Task's\n\t\tsubtask :{\n\t\t\t// shunt files, as above\n\t\t},\n\t\t// [, subtask2 : {} [, etc...]];\n\n\t\t// options\n\t\toptions : {\n\t\t\t// e.g. replace\n\t\t}\n\t}\n\n\n\n\n# Magic shit\n\nMoving an html file to a new place, also grabs relative files links to .css and .js files and moves them too (by default they also get minified, again Boom!).\n\n\tshunt({\n\t\t'bin/index.html' : 'src/index.html'\n\t})\n\n\n# Automate\n\nNot unique to this project but here's how i automate the build process in Sublime Text 2.\n\nAfter creating a script like `build.js` above (actually i prefix with a underscore to make it different, e.g. `_build.js`, do this, it'll sit nicely at the top of your file lists!)\n\nIn Sublime Text 2 go to \"Tools\" -> \"Build System\" -> \"New Build System...\"\n\nPaste the following code\n\n\t{\n\t\t\"cmd\": [\"node\", \"${file_path:${folder}}/_build.js\", \"$file_path\"],\n\t\t\"working_dir\" : \"${file_path:${folder}}\"\n\t}\n\nSave with a memorable name e.g. \"build.js\", aka \"build.js.sublime-build\". Then go back into \"Tools\" -> \"Build System\" and select it. \n\nNow from the directory where it is installed type, Ctrl + B ... you should see some action.\n\n\n# Contributing\n\nYeah go on, it'll make you feel good about yourself.",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/MrSwitch/node-shunt",
  "_id": "shunt@0.1.4",
  "_from": "shunt@0.1.4"
}
